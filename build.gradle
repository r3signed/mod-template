plugins {
    id "fabric-loom" version "${fabric_loom_version}" apply false
    id "com.diffplug.spotless" version "${spotless_version}"
    id "java"
}

allprojects {
    version = mod_version
    group = gradle_group
}

subprojects {
    apply plugin: "fabric-loom"
    apply plugin: "java"

    int java_target = java_version as Integer

    repositories {
        maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings "net.fabricmc:yarn:${yarn_mappings}:v2"

        modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

        modRuntimeOnly "me.djtheredstoner:DevAuth-fabric:${devauth_version}"

        testImplementation "net.fabricmc:fabric-loader-junit:${fabric_loader_version}"
    }

    test {
        useJUnitPlatform()
    }

    processResources {
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand "version": version,
                    "minecraft_version": minecraft_version,
                    "loader_version": fabric_loader_version,
                    "mod_id": mod_id,
                    "mod_name": mod_name
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        if (java_target >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release.set(java_target)
        }
    }

    java {
        if (JavaVersion.current() < JavaVersion.toVersion(java_target)) {
            toolchain.languageVersion = JavaLanguageVersion.of(java_target)
        }
        withSourcesJar()
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${mod_id}" }
        }
    }
}

/**
 * Credits to https://github.com/Wynntils for the spotless configuration.
 */
spotless {
    java {
        importOrder()
        removeUnusedImports()
        palantirJavaFormat()
        trimTrailingWhitespace()
        endWithNewline()

        ratchetFrom("origin/master")

        custom "Refuse wildcard imports", {
            if (it =~ /\nimport .*\*;/) {
                throw new AssertionError("Do not use wildcard imports. 'spotlessApply' cannot resolve this issue.")
            }
        } as Closure<String>
    }

    json {
        target("common/**/*.json")
        target("example/**/*.json")
        targetExclude("**/fabric.mod.json", "**/${mod_id}.mixins.json")

        gson()
                .indentWithSpaces(2)
                .sortByKeys()
        trimTrailingWhitespace()
        endWithNewline()
    }
}
